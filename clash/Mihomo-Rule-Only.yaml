Mark:
  # 锚点 - 节点筛选组
  FilterHK:  &FilterHK  '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
  FilterTW:  &FilterTW  '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
  FilterJP:  &FilterJP  '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
  FilterKR:  &FilterKR  '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
  FilterSG:  &FilterSG  '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
  FilterUS:  &FilterUS  '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
  FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)(\d+)?\b|(\d{4}-\d{2}-\d{2}|\dG)))).*$'
  # 锚点 - 策略组参数
  UrlTest:     &UrlTest     { type: url-test,     interval: 6, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true, include-all: true, tolerance: 20 }
  FallBack:    &FallBack    { type: fallback,     interval: 6, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true, include-all: true }
  LoadBalance: &LoadBalance { type: load-balance, interval: 6, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true, include-all: true, strategy: consistent-hashing }
  # 锚点 - 规则参数
  MrsIP:      &MrsIP      { format: mrs,  behavior: ipcidr,    type: http, interval: 3600, proxy: DIRECT }
  MrsClass:   &MrsClass   { format: mrs,  behavior: classical, type: http, interval: 3600, proxy: DIRECT }
  MrsDomain:  &MrsDomain  { format: mrs,  behavior: domain,    type: http, interval: 3600, proxy: DIRECT }
  TextIP:     &TextIP     { format: text, behavior: ipcidr,    type: http, interval: 3600, proxy: DIRECT }
  TextClass:  &TextClass  { format: text, behavior: classical, type: http, interval: 3600, proxy: DIRECT }
  TextDomain: &TextDomain { format: text, behavior: domain,    type: http, interval: 3600, proxy: DIRECT }
  YamlIP:     &YamlIP     { format: yaml, behavior: ipcidr,    type: http, interval: 3600, proxy: DIRECT }
  YamlClass:  &YamlClass  { format: yaml, behavior: classical, type: http, interval: 3600, proxy: DIRECT }
  YamlDomain: &YamlDomain { format: yaml, behavior: domain,    type: http, interval: 3600, proxy: DIRECT }
  # 锚点 - 节点选择
  #ProxyNation: &ProxyNation [ 香港节点, 台湾节点, 日本节点, 韩国节点, 新国节点, 美国节点 ]
  ProxyFirst:  &ProxyFirst  { type: select, proxies: [ 代理节点, 香港节点, 台湾节点, 日本节点, 韩国节点, 新国节点, 美国节点 ] }
  DirectFirst: &DirectFirst { type: select, proxies: [ DIRECT, 代理节点, 香港节点, 台湾节点, 日本节点, 韩国节点, 新国节点, 美国节点 ] }

# ================================ 上面为锚点区 ================================

# 策略组
proxy-groups:
  # 主要
  - { name: 代理节点, type: select, proxies: [ 香港节点, 台湾节点, 日本节点, 韩国节点, 新国节点, 美国节点, 手动节点 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Global.png }
  - { name: 手动节点, type: select, proxies: [ ⏱️️所有时延优选, 🚥所有故障转移, 🎛所有负载均衡 ], filter: *FilterAll, include-all-providers: true, include-all: true, icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Static.png }
  - { name: 广告节点, type: select, proxies: [ REJECT, DIRECT ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Adblock.png }
  - { name: 兜底节点, type: select, proxies: [ 代理节点, DIRECT, 手动节点, 香港节点, 台湾节点, 日本节点, 韩国节点, 新国节点, 美国节点 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Final.png }
  # 地区
  - { name: 香港节点, type: select, filter: *FilterHK, include-all-providers: true, include-all: true, proxies: [ ⏱️️香港时延优选, 🚥香港故障转移, 🎛香港负载均衡 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png }
  - { name: 台湾节点, type: select, filter: *FilterTW, include-all-providers: true, include-all: true, proxies: [ ⏱️️台湾时延优选, 🚥台湾故障转移, 🎛台湾负载均衡 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/TW.png }
  - { name: 日本节点, type: select, filter: *FilterJP, include-all-providers: true, include-all: true, proxies: [ ⏱️️日本时延优选, 🚥日本故障转移, 🎛日本负载均衡 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png }
  - { name: 韩国节点, type: select, filter: *FilterKR, include-all-providers: true, include-all: true, proxies: [ ⏱️️韩国时延优选, 🚥韩国故障转移, 🎛韩国负载均衡 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/KR.png }
  - { name: 新国节点, type: select, filter: *FilterSG, include-all-providers: true, include-all: true, proxies: [ ⏱️️新国时延优选, 🚥新国故障转移, 🎛新国负载均衡 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png }
  - { name: 美国节点, type: select, filter: *FilterUS, include-all-providers: true, include-all: true, proxies: [ ⏱️️美国时延优选, 🚥美国故障转移, 🎛美国负载均衡 ], icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png }
  # 时延优选
  - { name: ⏱️️香港时延优选, <<: *UrlTest, filter: *FilterHK }
  - { name: ⏱️️台湾时延优选, <<: *UrlTest, filter: *FilterTW }
  - { name: ⏱️️日本时延优选, <<: *UrlTest, filter: *FilterJP }
  - { name: ⏱️️韩国时延优选, <<: *UrlTest, filter: *FilterKR }
  - { name: ⏱️️新国时延优选, <<: *UrlTest, filter: *FilterSG }
  - { name: ⏱️️美国时延优选, <<: *UrlTest, filter: *FilterUS }
  - { name: ⏱️️所有时延优选, <<: *UrlTest, filter: *FilterAll }
  # 故障转移
  - { name: 🚥香港故障转移, <<: *FallBack, filter: *FilterHK }
  - { name: 🚥台湾故障转移, <<: *FallBack, filter: *FilterTW }
  - { name: 🚥日本故障转移, <<: *FallBack, filter: *FilterJP }
  - { name: 🚥韩国故障转移, <<: *FallBack, filter: *FilterKR }
  - { name: 🚥新国故障转移, <<: *FallBack, filter: *FilterSG }
  - { name: 🚥美国故障转移, <<: *FallBack, filter: *FilterUS }
  - { name: 🚥所有故障转移, <<: *FallBack, filter: *FilterAll }
  # 负载均衡
  - { name: 🎛香港负载均衡, <<: *LoadBalance, filter: *FilterHK }
  - { name: 🎛台湾负载均衡, <<: *LoadBalance, filter: *FilterTW }
  - { name: 🎛日本负载均衡, <<: *LoadBalance, filter: *FilterJP }
  - { name: 🎛韩国负载均衡, <<: *LoadBalance, filter: *FilterKR }
  - { name: 🎛新国负载均衡, <<: *LoadBalance, filter: *FilterSG }
  - { name: 🎛美国负载均衡, <<: *LoadBalance, filter: *FilterUS }
  - { name: 🎛所有负载均衡, <<: *LoadBalance, filter: *FilterAll }
  # 服务
  - { name: AIGC,     <<: *ProxyFirst,  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/OpenAI.png }
  - { name: 苹果,     <<: *DirectFirst, icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Apple.png }
  - { name: 苹果境外, <<: *ProxyFirst,  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Apple.png }
  - { name: 谷歌,     <<: *ProxyFirst,  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Google.png }
  - { name: 电报,     <<: *ProxyFirst,  icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Telegram.png }
  - { name: 微软,     <<: *DirectFirst, icon: https://raw.githubusercontent.com/Orz-3/mini/master/Color/Microsoft.png }
# 规则指向
rules:
  # 个人规则
  - RULE-SET, PreferDirect, DIRECT
  - RULE-SET, PreferProxy,  代理节点
  # 局域网
  - RULE-SET, Lan,          DIRECT
  # 广告
  - RULE-SET, Advertising,  广告节点
  # 智能助手
  - RULE-SET, AI,           AIGC
  # 苹果
  - RULE-SET, AppleCN,      DIRECT
  - RULE-SET, AppleProxy,   苹果境外
  - RULE-SET, Apple,        苹果
  # 谷歌
  - RULE-SET, YouTube,      谷歌
  - RULE-SET, YouTubeMusic, 谷歌
  - RULE-SET, Google,       谷歌
  # 电报
  # - RULE-SET, TelegramSG,   电报
  # - RULE-SET, TelegramUS,   电报
  - RULE-SET, Telegram,     电报
  # 微软
  - RULE-SET, MicrosoftCN,  DIRECT
  - RULE-SET, Microsoft,    微软
  #  Cloudflare
  - RULE-SET, CloudflareCN, DIRECT
  - RULE-SET, Cloudflare,   代理节点
  # GitHub
  - RULE-SET, GitHub,       代理节点
  # Docker
  - RULE-SET, Docker,       代理节点
  # 游戏
  - RULE-SET, SteamCN,      DIRECT
  - RULE-SET, Steam,        代理节点
  - RULE-SET, EpicCN,       DIRECT
  - RULE-SET, Epic,         代理节点
  # 国内
  - RULE-SET, ChinaMax,     DIRECT
  - GEOIP,    CN,           DIRECT
  - MATCH,                  兜底节点

# 订阅规则
rule-providers:
  # 个人规则
  PreferDirect: { <<: *YamlClass, path: './rules/PreferDirect.yaml', url: 'https://raw.githubusercontent.com/lizhian/rule-override/refs/heads/main/clash/PreferDirect.yaml' }
  PreferProxy:  { <<: *YamlClass, path: './rules/PreferProxy.yaml',  url: 'https://raw.githubusercontent.com/lizhian/rule-override/refs/heads/main/clash/PreferProxy.yaml' }
  # 局域网
  Lan:          { <<: *YamlClass, path: './rules/Lan.yaml',          url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Lan/Lan.yaml' }
  # 直连公共服务
  Direct:       { <<: *YamlClass, path: './rules/Direct.yaml',       url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Direct/Direct.yaml' }
  # 广告
  Advertising:  { <<: *YamlClass, path: './rules/Advertising.yaml',  url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Advertising/Advertising_Classical.yaml' }
  # 智能助手
  AI:           { <<: *YamlClass, path: './rules/AI.yaml',           url: 'https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/classical/category-ai-!cn.yaml' }
  # 苹果
  AppleCN:      { <<: *YamlClass, path: './rules/AppleCN.yaml',      url: 'https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/classical/apple-cn.yaml' }
  AppleProxy:   { <<: *YamlClass, path: './rules/AppleProxy.yaml',   url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/AppleProxy/AppleProxy.yaml' }
  Apple:        { <<: *YamlClass, path: './rules/Apple.yaml',        url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Apple/Apple_Classical.yaml' }
  # 谷歌
  YouTube:      { <<: *YamlClass, path: './rules/YouTube.yaml',      url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/YouTube/YouTube.yaml' }
  YouTubeMusic: { <<: *YamlClass, path: './rules/YouTubeMusic.yaml', url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/YouTubeMusic/YouTubeMusic.yaml' }
  Google:       { <<: *YamlClass, path: './rules/Google.yaml',       url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Google/Google.yaml' }
  # 电报
  # TelegramSG:   { <<: *YamlClass, path: './rules/TelegramSG.yaml',   url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/TelegramSG/TelegramSG.yaml' }
  # TelegramUS:   { <<: *YamlClass, path: './rules/TelegramUS.yaml',   url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/TelegramUS/TelegramUS.yaml' }
  Telegram:     { <<: *YamlClass, path: './rules/Telegram.yaml',     url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Telegram/Telegram.yaml' }
  # 微软
  MicrosoftCN:  { <<: *YamlClass, path: './rules/MicrosoftCN.yaml',  url: 'https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/classical/microsoft@cn.yaml' }
  Microsoft:    { <<: *YamlClass, path: './rules/Microsoft.yaml',    url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Microsoft/Microsoft.yaml' }
  # Cloudflare
  CloudflareCN: { <<: *YamlClass, path: './rules/CloudflareCN.yaml', url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Cloudflarecn/Cloudflarecn.yaml' }
  Cloudflare:   { <<: *YamlClass, path: './rules/Cloudflare.yaml',   url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Cloudflare/Cloudflare.yaml' }
  # GitHub
  GitHub:       { <<: *YamlClass, path: './rules/GitHub.yaml',       url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GitHub/GitHub.yaml' }
  # Docker
  Docker:       { <<: *YamlClass, path: './rules/Docker.yaml',       url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Docker/Docker.yaml' }
  # 游戏
  SteamCN:      { <<: *YamlClass, path: './rules/SteamCN.yaml',      url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/SteamCN/SteamCN.yaml' }
  Steam:        { <<: *YamlClass, path: './rules/Steam.yaml',        url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Steam/Steam.yaml' }
  EpicCN:       { <<: *YamlClass, path: './rules/EpicCN.yaml',       url: 'https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/classical/epicgames@cn.yaml' }
  Epic:         { <<: *YamlClass, path: './rules/Epic.yaml',         url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Epic/Epic.yaml' }
  # 国内
  ChinaMax:     { <<: *YamlClass, path: './rules/ChinaMax.yaml',     url: 'https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/ChinaMax/ChinaMax_Classical.yaml' }
  # FakeIP:       { <<: *MrsDomain, path: "./rules/FakeIP.mrs",        url: "https://cdn.jsdelivr.net/gh/Lanlan13-14/Rules@main/rules/Domain/fakeip-filter.mrs" }

mixed-port: 7890
